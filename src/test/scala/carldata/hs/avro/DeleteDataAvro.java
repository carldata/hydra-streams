/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package carldata.hs.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeleteDataAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3943398198907322710L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeleteDataAvro\",\"namespace\":\"carldata.hs.avro\",\"fields\":[{\"name\":\"actionId\",\"type\":\"string\"},{\"name\":\"channelId\",\"type\":\"string\"},{\"name\":\"startDate\",\"type\":\"string\"},{\"name\":\"endDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeleteDataAvro> ENCODER =
      new BinaryMessageEncoder<DeleteDataAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeleteDataAvro> DECODER =
      new BinaryMessageDecoder<DeleteDataAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DeleteDataAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DeleteDataAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeleteDataAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DeleteDataAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DeleteDataAvro from a ByteBuffer. */
  public static DeleteDataAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence actionId;
  @Deprecated public java.lang.CharSequence channelId;
  @Deprecated public java.lang.CharSequence startDate;
  @Deprecated public java.lang.CharSequence endDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeleteDataAvro() {}

  /**
   * All-args constructor.
   * @param actionId The new value for actionId
   * @param channelId The new value for channelId
   * @param startDate The new value for startDate
   * @param endDate The new value for endDate
   */
  public DeleteDataAvro(java.lang.CharSequence actionId, java.lang.CharSequence channelId, java.lang.CharSequence startDate, java.lang.CharSequence endDate) {
    this.actionId = actionId;
    this.channelId = channelId;
    this.startDate = startDate;
    this.endDate = endDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return actionId;
    case 1: return channelId;
    case 2: return startDate;
    case 3: return endDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: actionId = (java.lang.CharSequence)value$; break;
    case 1: channelId = (java.lang.CharSequence)value$; break;
    case 2: startDate = (java.lang.CharSequence)value$; break;
    case 3: endDate = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'actionId' field.
   * @return The value of the 'actionId' field.
   */
  public java.lang.CharSequence getActionId() {
    return actionId;
  }

  /**
   * Sets the value of the 'actionId' field.
   * @param value the value to set.
   */
  public void setActionId(java.lang.CharSequence value) {
    this.actionId = value;
  }

  /**
   * Gets the value of the 'channelId' field.
   * @return The value of the 'channelId' field.
   */
  public java.lang.CharSequence getChannelId() {
    return channelId;
  }

  /**
   * Sets the value of the 'channelId' field.
   * @param value the value to set.
   */
  public void setChannelId(java.lang.CharSequence value) {
    this.channelId = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public java.lang.CharSequence getStartDate() {
    return startDate;
  }

  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(java.lang.CharSequence value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return The value of the 'endDate' field.
   */
  public java.lang.CharSequence getEndDate() {
    return endDate;
  }

  /**
   * Sets the value of the 'endDate' field.
   * @param value the value to set.
   */
  public void setEndDate(java.lang.CharSequence value) {
    this.endDate = value;
  }

  /**
   * Creates a new DeleteDataAvro RecordBuilder.
   * @return A new DeleteDataAvro RecordBuilder
   */
  public static carldata.hs.avro.DeleteDataAvro.Builder newBuilder() {
    return new carldata.hs.avro.DeleteDataAvro.Builder();
  }

  /**
   * Creates a new DeleteDataAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeleteDataAvro RecordBuilder
   */
  public static carldata.hs.avro.DeleteDataAvro.Builder newBuilder(carldata.hs.avro.DeleteDataAvro.Builder other) {
    return new carldata.hs.avro.DeleteDataAvro.Builder(other);
  }

  /**
   * Creates a new DeleteDataAvro RecordBuilder by copying an existing DeleteDataAvro instance.
   * @param other The existing instance to copy.
   * @return A new DeleteDataAvro RecordBuilder
   */
  public static carldata.hs.avro.DeleteDataAvro.Builder newBuilder(carldata.hs.avro.DeleteDataAvro other) {
    return new carldata.hs.avro.DeleteDataAvro.Builder(other);
  }

  /**
   * RecordBuilder for DeleteDataAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeleteDataAvro>
    implements org.apache.avro.data.RecordBuilder<DeleteDataAvro> {

    private java.lang.CharSequence actionId;
    private java.lang.CharSequence channelId;
    private java.lang.CharSequence startDate;
    private java.lang.CharSequence endDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(carldata.hs.avro.DeleteDataAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.actionId)) {
        this.actionId = data().deepCopy(fields()[0].schema(), other.actionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channelId)) {
        this.channelId = data().deepCopy(fields()[1].schema(), other.channelId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startDate)) {
        this.startDate = data().deepCopy(fields()[2].schema(), other.startDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endDate)) {
        this.endDate = data().deepCopy(fields()[3].schema(), other.endDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DeleteDataAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(carldata.hs.avro.DeleteDataAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.actionId)) {
        this.actionId = data().deepCopy(fields()[0].schema(), other.actionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.channelId)) {
        this.channelId = data().deepCopy(fields()[1].schema(), other.channelId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startDate)) {
        this.startDate = data().deepCopy(fields()[2].schema(), other.startDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endDate)) {
        this.endDate = data().deepCopy(fields()[3].schema(), other.endDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'actionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getActionId() {
      return actionId;
    }

    /**
      * Sets the value of the 'actionId' field.
      * @param value The value of 'actionId'.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder setActionId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.actionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'actionId' field has been set.
      * @return True if the 'actionId' field has been set, false otherwise.
      */
    public boolean hasActionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'actionId' field.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder clearActionId() {
      actionId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'channelId' field.
      * @return The value.
      */
    public java.lang.CharSequence getChannelId() {
      return channelId;
    }

    /**
      * Sets the value of the 'channelId' field.
      * @param value The value of 'channelId'.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder setChannelId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.channelId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'channelId' field has been set.
      * @return True if the 'channelId' field has been set, false otherwise.
      */
    public boolean hasChannelId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'channelId' field.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder clearChannelId() {
      channelId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartDate() {
      return startDate;
    }

    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder setStartDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.startDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndDate() {
      return endDate;
    }

    /**
      * Sets the value of the 'endDate' field.
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder setEndDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.endDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endDate' field.
      * @return This builder.
      */
    public carldata.hs.avro.DeleteDataAvro.Builder clearEndDate() {
      endDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeleteDataAvro build() {
      try {
        DeleteDataAvro record = new DeleteDataAvro();
        record.actionId = fieldSetFlags()[0] ? this.actionId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.channelId = fieldSetFlags()[1] ? this.channelId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.startDate = fieldSetFlags()[2] ? this.startDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.endDate = fieldSetFlags()[3] ? this.endDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeleteDataAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeleteDataAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeleteDataAvro>
    READER$ = (org.apache.avro.io.DatumReader<DeleteDataAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
