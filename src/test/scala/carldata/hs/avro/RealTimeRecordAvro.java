/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package carldata.hs.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RealTimeRecordAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6027129808311582605L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RealTimeRecordAvro\",\"namespace\":\"carldata.hs.avro\",\"fields\":[{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"RealTimeRecordActionAvro\",\"symbols\":[\"AddAction\",\"RemoveAction\",\"UnknownAction\"]}},{\"name\":\"calculationId\",\"type\":\"string\"},{\"name\":\"script\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"trigger\",\"type\":\"string\"},{\"name\":\"outputChannelId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RealTimeRecordAvro> ENCODER =
      new BinaryMessageEncoder<RealTimeRecordAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RealTimeRecordAvro> DECODER =
      new BinaryMessageDecoder<RealTimeRecordAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RealTimeRecordAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RealTimeRecordAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RealTimeRecordAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RealTimeRecordAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RealTimeRecordAvro from a ByteBuffer. */
  public static RealTimeRecordAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public carldata.hs.avro.RealTimeRecordActionAvro action;
  @Deprecated public java.lang.CharSequence calculationId;
  @Deprecated public java.util.List<java.lang.CharSequence> script;
  @Deprecated public java.lang.CharSequence trigger;
  @Deprecated public java.lang.CharSequence outputChannelId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RealTimeRecordAvro() {}

  /**
   * All-args constructor.
   * @param action The new value for action
   * @param calculationId The new value for calculationId
   * @param script The new value for script
   * @param trigger The new value for trigger
   * @param outputChannelId The new value for outputChannelId
   */
  public RealTimeRecordAvro(carldata.hs.avro.RealTimeRecordActionAvro action, java.lang.CharSequence calculationId, java.util.List<java.lang.CharSequence> script, java.lang.CharSequence trigger, java.lang.CharSequence outputChannelId) {
    this.action = action;
    this.calculationId = calculationId;
    this.script = script;
    this.trigger = trigger;
    this.outputChannelId = outputChannelId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return action;
    case 1: return calculationId;
    case 2: return script;
    case 3: return trigger;
    case 4: return outputChannelId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: action = (carldata.hs.avro.RealTimeRecordActionAvro)value$; break;
    case 1: calculationId = (java.lang.CharSequence)value$; break;
    case 2: script = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: trigger = (java.lang.CharSequence)value$; break;
    case 4: outputChannelId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public carldata.hs.avro.RealTimeRecordActionAvro getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(carldata.hs.avro.RealTimeRecordActionAvro value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'calculationId' field.
   * @return The value of the 'calculationId' field.
   */
  public java.lang.CharSequence getCalculationId() {
    return calculationId;
  }

  /**
   * Sets the value of the 'calculationId' field.
   * @param value the value to set.
   */
  public void setCalculationId(java.lang.CharSequence value) {
    this.calculationId = value;
  }

  /**
   * Gets the value of the 'script' field.
   * @return The value of the 'script' field.
   */
  public java.util.List<java.lang.CharSequence> getScript() {
    return script;
  }

  /**
   * Sets the value of the 'script' field.
   * @param value the value to set.
   */
  public void setScript(java.util.List<java.lang.CharSequence> value) {
    this.script = value;
  }

  /**
   * Gets the value of the 'trigger' field.
   * @return The value of the 'trigger' field.
   */
  public java.lang.CharSequence getTrigger() {
    return trigger;
  }

  /**
   * Sets the value of the 'trigger' field.
   * @param value the value to set.
   */
  public void setTrigger(java.lang.CharSequence value) {
    this.trigger = value;
  }

  /**
   * Gets the value of the 'outputChannelId' field.
   * @return The value of the 'outputChannelId' field.
   */
  public java.lang.CharSequence getOutputChannelId() {
    return outputChannelId;
  }

  /**
   * Sets the value of the 'outputChannelId' field.
   * @param value the value to set.
   */
  public void setOutputChannelId(java.lang.CharSequence value) {
    this.outputChannelId = value;
  }

  /**
   * Creates a new RealTimeRecordAvro RecordBuilder.
   * @return A new RealTimeRecordAvro RecordBuilder
   */
  public static carldata.hs.avro.RealTimeRecordAvro.Builder newBuilder() {
    return new carldata.hs.avro.RealTimeRecordAvro.Builder();
  }

  /**
   * Creates a new RealTimeRecordAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RealTimeRecordAvro RecordBuilder
   */
  public static carldata.hs.avro.RealTimeRecordAvro.Builder newBuilder(carldata.hs.avro.RealTimeRecordAvro.Builder other) {
    return new carldata.hs.avro.RealTimeRecordAvro.Builder(other);
  }

  /**
   * Creates a new RealTimeRecordAvro RecordBuilder by copying an existing RealTimeRecordAvro instance.
   * @param other The existing instance to copy.
   * @return A new RealTimeRecordAvro RecordBuilder
   */
  public static carldata.hs.avro.RealTimeRecordAvro.Builder newBuilder(carldata.hs.avro.RealTimeRecordAvro other) {
    return new carldata.hs.avro.RealTimeRecordAvro.Builder(other);
  }

  /**
   * RecordBuilder for RealTimeRecordAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RealTimeRecordAvro>
    implements org.apache.avro.data.RecordBuilder<RealTimeRecordAvro> {

    private carldata.hs.avro.RealTimeRecordActionAvro action;
    private java.lang.CharSequence calculationId;
    private java.util.List<java.lang.CharSequence> script;
    private java.lang.CharSequence trigger;
    private java.lang.CharSequence outputChannelId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(carldata.hs.avro.RealTimeRecordAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.action)) {
        this.action = data().deepCopy(fields()[0].schema(), other.action);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.calculationId)) {
        this.calculationId = data().deepCopy(fields()[1].schema(), other.calculationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.script)) {
        this.script = data().deepCopy(fields()[2].schema(), other.script);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trigger)) {
        this.trigger = data().deepCopy(fields()[3].schema(), other.trigger);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.outputChannelId)) {
        this.outputChannelId = data().deepCopy(fields()[4].schema(), other.outputChannelId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RealTimeRecordAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(carldata.hs.avro.RealTimeRecordAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.action)) {
        this.action = data().deepCopy(fields()[0].schema(), other.action);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.calculationId)) {
        this.calculationId = data().deepCopy(fields()[1].schema(), other.calculationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.script)) {
        this.script = data().deepCopy(fields()[2].schema(), other.script);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trigger)) {
        this.trigger = data().deepCopy(fields()[3].schema(), other.trigger);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.outputChannelId)) {
        this.outputChannelId = data().deepCopy(fields()[4].schema(), other.outputChannelId);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public carldata.hs.avro.RealTimeRecordActionAvro getAction() {
      return action;
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder setAction(carldata.hs.avro.RealTimeRecordActionAvro value) {
      validate(fields()[0], value);
      this.action = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder clearAction() {
      action = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'calculationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCalculationId() {
      return calculationId;
    }

    /**
      * Sets the value of the 'calculationId' field.
      * @param value The value of 'calculationId'.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder setCalculationId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.calculationId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'calculationId' field has been set.
      * @return True if the 'calculationId' field has been set, false otherwise.
      */
    public boolean hasCalculationId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'calculationId' field.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder clearCalculationId() {
      calculationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'script' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getScript() {
      return script;
    }

    /**
      * Sets the value of the 'script' field.
      * @param value The value of 'script'.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder setScript(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.script = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'script' field has been set.
      * @return True if the 'script' field has been set, false otherwise.
      */
    public boolean hasScript() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'script' field.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder clearScript() {
      script = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'trigger' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrigger() {
      return trigger;
    }

    /**
      * Sets the value of the 'trigger' field.
      * @param value The value of 'trigger'.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder setTrigger(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.trigger = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'trigger' field has been set.
      * @return True if the 'trigger' field has been set, false otherwise.
      */
    public boolean hasTrigger() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'trigger' field.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder clearTrigger() {
      trigger = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'outputChannelId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOutputChannelId() {
      return outputChannelId;
    }

    /**
      * Sets the value of the 'outputChannelId' field.
      * @param value The value of 'outputChannelId'.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder setOutputChannelId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.outputChannelId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'outputChannelId' field has been set.
      * @return True if the 'outputChannelId' field has been set, false otherwise.
      */
    public boolean hasOutputChannelId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'outputChannelId' field.
      * @return This builder.
      */
    public carldata.hs.avro.RealTimeRecordAvro.Builder clearOutputChannelId() {
      outputChannelId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RealTimeRecordAvro build() {
      try {
        RealTimeRecordAvro record = new RealTimeRecordAvro();
        record.action = fieldSetFlags()[0] ? this.action : (carldata.hs.avro.RealTimeRecordActionAvro) defaultValue(fields()[0]);
        record.calculationId = fieldSetFlags()[1] ? this.calculationId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.script = fieldSetFlags()[2] ? this.script : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.trigger = fieldSetFlags()[3] ? this.trigger : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.outputChannelId = fieldSetFlags()[4] ? this.outputChannelId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RealTimeRecordAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<RealTimeRecordAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RealTimeRecordAvro>
    READER$ = (org.apache.avro.io.DatumReader<RealTimeRecordAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
